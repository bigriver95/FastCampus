package com.example.a

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_UPDATE_CURRENT
import android.content.Context
import android.content.Intent
import android.os.Build
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.example.faststudy.Alarm
import com.example.faststudy.NotificationType
import com.example.faststudy.Quote
import com.example.faststudy.R
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class MyFirebaseMessagingService : FirebaseMessagingService() {

    // ÌÜ†ÌÅ∞ÏùÄ Ïñ∏Ï†úÎì† Î≥ÄÍ≤ΩÏù¥ ÏâΩÍ≤å Îê† Ïàò ÏûàÏùå 1)ÏÉà Í∏∞Í∏∞Ïóê Ïï± Î≥µÏõê 2)ÏÇ¨Ïö©ÏûêÍ∞Ä Ïï± ÏÇ≠Ï†ú/ Ïû¨ÏÑ§Ïπò 3)ÏÇ¨Ïö©ÏûêÍ∞Ä Ïï± Îç∞Ïù¥ÌÑ∞ ÏÜåÍ±∞
    // Ïã§Ï†ú ÎùºÏù¥Î∏åÏóêÏÑúÎäî Î¨¥Î¶¨Í∞Ä ÏûàÏùÑ Ïàò ÏûàÏùå onNewToken : Ìò∏Ï∂ú Îê†ÎïåÎßàÎã§ Ìï¥Îãπ ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã± Ìï¥Ï£ºÎäî Ï≤òÎ¶¨Î•º Ìï¥Ï§òÏïºÌï®
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }


    // ÌååÏù¥Ïñ¥Î≤†Ïù¥Ïä§ Î©îÏãúÏßÄÎ•º ÏàòÏã†Ìï†Îïå ÎßàÎã§ Ïù¥Í≤ÉÏùÑ Ìò∏Ï∂úÌï® Î™®Îì† Ï≤òÎ¶¨Î•º Ïó¨Í∏∞ÏÑúÌï®.
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        createNotificationChannel()
        //enumÍ≥º Ïù¥Î¶ÑÏù¥ ÎßûÏúºÎ©¥ ÎèôÏùºÌïú Í∞íÏùÑ Ï†ÑÎã¨Ìï¥Ï§ÄÎã§.
        val type = remoteMessage.data["type"]
            ?.let{NotificationType.valueOf(it)}
        val title = remoteMessage.data["title"]
        val message = remoteMessage.data["message"]

        // typeÏù¥ ÏïàÎßûÏïÑÏÑú errorÍ∞Ä Î∞úÏÉùÌï† Ïàò ÏûàÍ≥† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Ïàò ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê
        type ?: return


        NotificationManagerCompat.from(this)
            .notify(type.id, createNotification(type, title, message))

    }

    private fun createNotificationChannel(){
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT)
            // Î≤ÑÏ†Ñ ÎßàÎã§ Ï§ëÏöîÎèÑÍ∞Ä Îã§Î•¥Í∏∞ ÎïåÎ¨∏Ïóê Ï¢Ä Î¥êÏïºÌï® ÌäπÌûà ÏïåÎ¶º Î∂ÄÎ∂Ñ!!

            channel.description = CHANNEL_DESCRIPTION

            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                .createNotificationChannel(channel)
            //Ï±ÑÎÑêÏù¥ ÏÉùÏÑ± ÎêòÏßÄ ÏïäÏïòÏùå ÏïÑÏßÅ
            //ÌÜ†ÌÅ∞ÏùÑ Î≥µÏÇ¨Ìï¥ÏÑú ÎÑ£Ïñ¥ÏÑú Ïã§ÌñâÏùÑ ÏãúÏºúÏ£ºÎ©¥
        }
    }

    private fun createNotification(
        type : NotificationType,
        title:String?, message:String?
    ): Notification {

        val intent = Intent(this, Alarm::class.java).apply {
            putExtra("notificationType","${type.title}ÌÉÄÏûÖ")
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
            // Í∏∞Ï°¥Ïùò Ïï°Ìã∞ÎπÑÌã∞Î•º ÏåìÎäî Î∞©ÏãùÏùÄ Ïä§ÌÖêÎã§Îìú Î∞©Ïãù ->
            // BÏùò ÌôîÎ©¥Ïù¥ Îñ†ÏûàÎäî ÏÉÅÌÉúÏóêÏÑú Îòê BÏùò ÌôîÎ©¥Ïù¥ Í∞±Ïã† ÎêòÎ©¥ Ïù¥ÏÉÅÌïòÍ≤å Î≥¥Ïùº Ïàò ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê
        }

        //FLAG_UPDATE_CURRENT Îäî PendingIntent Ï†ïÏùòÎêú ÏÉÅÏàòÏûÑ
        //PendingIntent = ÎàÑÍµ∞Í∞ÄÏóêÍ≤å IntentÎ•º Îã§Î£∞ Ïàò ÏûàÎäî Í∂åÌïúÏùÑ Ï£ºÎäîÍ±∞
        val pendingIntent = PendingIntent.getActivity(this, type.id, intent, FLAG_UPDATE_CURRENT)

        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notifications)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            //Î©îÏÑ∏ÏßÄÎ•º ÌÉ≠ÏùÑ ÌïòÍ≤åÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú ÏÇ≠Ï†úÌïòÍ≤å Ìï¥Ï§å
            .setAutoCancel(true)

        when(type){
            NotificationType.NORMAL -> Unit
            NotificationType.EXPANDABLE -> {
                notificationBuilder.setStyle(
                    NotificationCompat.BigTextStyle()
                        .bigText(
                            "ü§¶üèªüßñüèªüôÖüèªüëó üëò ü•ª ü©¥ ü©± ü©≤ ü©≥ üëô " +
                                    "üëö üëõ üëú üëù üéí üëû üëü ü•æ ü•ø üë† üë° ü©∞ üë¢ üëë" +
                                    "\uD83D\uDC6F\uD83D\uDC6F\uD83D\uDC6F\uD83D\uDC6F\uD83D\uDC6F"

                )
                )
            }
            NotificationType.CUSTOM -> {
                notificationBuilder.setStyle(
                    NotificationCompat.DecoratedCustomViewStyle())
                    .setCustomContentView(
                        RemoteViews(
                            packageName,
                            R.layout.view_custom_notification
                        ).apply {
                            setTextViewText(R.id.title_notification, title)
                            setTextViewText(R.id.message_notification, message)
                        }
                    )
            }
            }

        return  notificationBuilder.build()
        }




    companion object{
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = "Emoji PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel ID"
    }
}